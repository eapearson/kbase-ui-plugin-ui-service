["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$React",["^ ","~$Component",["^ ","~$call",["^ "]],"~$createElement",["^ "],"~$cloneElement",["^ "]],"~$window",["^ ","~$requestAnimationFrame",["^ "],"~$webkitRequestAnimationFrame",["^ "],"~$mozRequestAnimationFrame",["^ "],"~$msRequestAnimationFrame",["^ "]],"~$setTimeout",["^ "],"~$ReactNative",["^ ","~$unstable_batchedUpdates",["^ "]],"~$ReactDOM",["^ ","^?",["^ "],"~$render",["^ "],"~$unmountComponentAtNode",["^ "],"~$hydrate",["^ "],"~$createPortal",["^ "],"~$findDOMNode",["^ "]],"~$Error",["^ "]],"~:use-macros",["^ ","~$call-all","~$rum.util","~$collect","^I","~$collect*","^I"],"~:excludes",["~#set",["~$ref"]],"~:name","~$rum.core","~:imports",null,"~:requires",["^ ","~$rum.cursor","^S","~$gobj","~$goog.object","^U","^U","~$cljsjs.react","^V","~$rum.derived-atom","^W","~$sablono.core","^X","~$cljsjs.react.dom","^Y","~$util","^I","^I","^I","~$cursor","^S","~$derived-atom","^W"],"~:uses",["^ ","^H","^I","^J","^I","^K","^I"],"~:defs",["^ ","~$mount",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/erikpearson/work/kbase/sprints/2018Q1S4/kbase-ui-plugin-example-clojurescript/src/cljs/app/../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","~:line",214,"~:column",7,"~:end-line",214,"~:end-column",12,"~:arglists",["~#list",["~$quote",["^1<",[["~$component","~$node"]]]]],"~:doc","Add component to the DOM tree. Idempotent. Subsequent mounts will just update component"],"^O","~$rum.core/mount","~:variadic",false,"^16","../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^1:",12,"~:method-params",["^1<",[["^1>","^1?"]]],"~:protocol-impl",null,"~:arglists-meta",["^1<",[null,null]],"^18",1,"^17",214,"^19",214,"~:max-fixed-arity",2,"~:fn-var",true,"^1;",["^1<",["^1=",["^1<",[["^1>","^1?"]]]]],"^1@","Add component to the DOM tree. Idempotent. Subsequent mounts will just update component"],"~$unmount",["^ ","^14",null,"^15",["^ ","^16","/Users/erikpearson/work/kbase/sprints/2018Q1S4/kbase-ui-plugin-example-clojurescript/src/cljs/app/../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",221,"^18",7,"^19",221,"^1:",14,"^1;",["^1<",["^1=",["^1<",[["^1?"]]]]],"^1@","Removes component from the DOM tree"],"^O","~$rum.core/unmount","^1B",false,"^16","../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^1:",14,"^1C",["^1<",[["^1?"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",221,"^19",221,"^1F",1,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1?"]]]]],"^1@","Removes component from the DOM tree"],"~$local",["^ ","^14",null,"^15",["^ ","^16","/Users/erikpearson/work/kbase/sprints/2018Q1S4/kbase-ui-plugin-example-clojurescript/src/cljs/app/../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",283,"^18",7,"^19",283,"^1:",12,"^1;",["^1<",["^1=",["^1<",[["~$initial"],["^1K","~$key"]]]]],"^1@","Mixin constructor. Adds an atom to component’s state that can be used to keep stuff\n   during component’s lifecycle. Component will be re-rendered if atom’s value changes.\n   Atom is stored under user-provided key or under `:rum/local` by default","~:top-fn",["^ ","^1B",false,"^1F",2,"^1C",["^1<",[["^1K"],["^1K","^1L"]]],"^1;",["^1<",[["^1K"],["^1K","^1L"]]],"^1E",["^1<",[null,null]]]],"^O","~$rum.core/local","^1B",false,"^16","../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^1:",12,"^1M",["^ ","^1B",false,"^1F",2,"^1C",["^1<",[["^1K"],["^1K","^1L"]]],"^1;",["^1<",[["^1K"],["^1K","^1L"]]],"^1E",["^1<",[null,null]]],"^1C",["^1<",[["^1K"],["^1K","^1L"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",283,"^19",283,"^1F",2,"^1G",true,"^1;",["^1<",[["^1K"],["^1K","^1L"]]],"^1@","Mixin constructor. Adds an atom to component’s state that can be used to keep stuff\n   during component’s lifecycle. Component will be re-rendered if atom’s value changes.\n   Atom is stored under user-provided key or under `:rum/local` by default"],"~$reactive",["^ ","^O","~$rum.core/reactive","^16","../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",304,"^18",1,"^19",304,"^1:",14,"^15",["^ ","^16","/Users/erikpearson/work/kbase/sprints/2018Q1S4/kbase-ui-plugin-example-clojurescript/src/cljs/app/../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",304,"^18",6,"^19",304,"^1:",14],"^1@","Mixin. Works in conjunction with `rum.core/react`","~:tag","~$cljs.core/IMap"],"~$render-all",["^ ","^14",null,"^15",["^ ","^16","/Users/erikpearson/work/kbase/sprints/2018Q1S4/kbase-ui-plugin-example-clojurescript/src/cljs/app/../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",194,"^18",8,"^19",194,"^1:",18,"~:private",true,"^1;",["^1<",["^1=",["^1<",[["~$queue"]]]]]],"^1T",true,"^O","~$rum.core/render-all","^1B",false,"^16","../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^1:",18,"^1C",["^1<",[["^1U"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",194,"^19",194,"^1F",1,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1U"]]]]]],"~$ref-node",["^ ","^14",null,"^15",["^ ","^16","/Users/erikpearson/work/kbase/sprints/2018Q1S4/kbase-ui-plugin-example-clojurescript/src/cljs/app/../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",265,"^18",7,"^19",265,"^1:",15,"^1;",["^1<",["^1=",["^1<",[["~$state","^1L"]]]]],"^1@","Given state and ref handle, returns DOM node associated with ref"],"^O","~$rum.core/ref-node","^1B",false,"^16","../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^1:",15,"^1C",["^1<",[["^1X","^1L"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",265,"^19",265,"^1F",2,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1X","^1L"]]]]],"^1@","Given state and ref handle, returns DOM node associated with ref"],"~$react",["^ ","^14",null,"^15",["^ ","^16","/Users/erikpearson/work/kbase/sprints/2018Q1S4/kbase-ui-plugin-example-clojurescript/src/cljs/app/../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",335,"^18",7,"^19",335,"^1:",12,"^1;",["^1<",["^1=",["^1<",[["^N"]]]]],"^1@","Works in conjunction with `rum.core/reactive` mixin. Use this function instead of\n   `deref` inside render, and your component will subscribe to changes happening\n   to the derefed atom."],"^O","~$rum.core/react","^1B",false,"^16","../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^1:",12,"^1C",["^1<",[["^N"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",335,"^19",335,"^1F",1,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^N"]]]]],"^1@","Works in conjunction with `rum.core/reactive` mixin. Use this function instead of\n   `deref` inside render, and your component will subscribe to changes happening\n   to the derefed atom."],"~$schedule",["^ ","^O","~$rum.core/schedule","^16","../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",175,"^18",1,"^19",175,"^1:",24,"^1T",true,"^15",["^ ","^16","/Users/erikpearson/work/kbase/sprints/2018Q1S4/kbase-ui-plugin-example-clojurescript/src/cljs/app/../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",175,"^18",16,"^19",175,"^1:",24,"^1T",true],"^1Q",["^M",["~$boolean","~$js","~$function"]]],"~$request-render",["^ ","^14",null,"^15",["^ ","^16","/Users/erikpearson/work/kbase/sprints/2018Q1S4/kbase-ui-plugin-example-clojurescript/src/cljs/app/../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",206,"^18",7,"^19",206,"^1:",21,"^1;",["^1<",["^1=",["^1<",[["^1>"]]]]],"^1@","Schedules react component to be rendered on next animation frame"],"^O","~$rum.core/request-render","^1B",false,"^16","../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^1:",21,"^1C",["^1<",[["^1>"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",206,"^19",206,"^1F",1,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1>"]]]]],"^1@","Schedules react component to be rendered on next animation frame"],"~$render-queue",["^ ","^O","~$rum.core/render-queue","^16","../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",191,"^18",1,"^19",191,"^1:",28,"^1T",true,"^15",["^ ","^16","/Users/erikpearson/work/kbase/sprints/2018Q1S4/kbase-ui-plugin-example-clojurescript/src/cljs/app/../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",191,"^18",16,"^19",191,"^1:",28,"^1T",true],"^1Q","~$any"],"~$portal",["^ ","^14",null,"^15",["^ ","^16","/Users/erikpearson/work/kbase/sprints/2018Q1S4/kbase-ui-plugin-example-clojurescript/src/cljs/app/../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",233,"^18",7,"^19",233,"^1:",13,"^1;",["^1<",["^1=",["^1<",[["^1>","^1?"]]]]],"^1@","Render `component` in a DOM `node` that might be ouside of current DOM hierarchy"],"^O","~$rum.core/portal","^1B",false,"^16","../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^1:",13,"^1C",["^1<",[["^1>","^1?"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",233,"^19",233,"^1F",2,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1>","^1?"]]]]],"^1@","Render `component` in a DOM `node` that might be ouside of current DOM hierarchy"],"~$with-key",["^ ","^14",null,"^15",["^ ","^16","/Users/erikpearson/work/kbase/sprints/2018Q1S4/kbase-ui-plugin-example-clojurescript/src/cljs/app/../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",241,"^18",7,"^19",241,"^1:",15,"^1;",["^1<",["^1=",["^1<",[["^1>","^1L"]]]]],"^1@","Adds React key to component"],"^O","~$rum.core/with-key","^1B",false,"^16","../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^1:",15,"^1C",["^1<",[["^1>","^1L"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",241,"^19",241,"^1F",2,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1>","^1L"]]]]],"^1@","Adds React key to component"],"~$extend!",["^ ","^14",null,"^15",["^ ","^16","/Users/erikpearson/work/kbase/sprints/2018Q1S4/kbase-ui-plugin-example-clojurescript/src/cljs/app/../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",20,"^18",7,"^19",20,"^1:",14,"^1;",["^1<",["^1=",["^1<",[["~$obj","~$props"]]]]]],"^O","~$rum.core/extend!","^1B",false,"^16","../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^1:",14,"^1C",["^1<",[["^2?","^2@"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",20,"^19",20,"^1F",2,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^2?","^2@"]]]]]],"~$build-defcs",["^ ","^14",null,"^15",["^ ","^16","/Users/erikpearson/work/kbase/sprints/2018Q1S4/kbase-ui-plugin-example-clojurescript/src/cljs/app/../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",163,"^18",7,"^19",163,"^1:",18,"^1;",["^1<",["^1=",["^1<",[["~$render-body","~$mixins","~$display-name"]]]]]],"^O","~$rum.core/build-defcs","^1B",false,"^16","../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^1:",18,"^1C",["^1<",[["^2C","^2D","^2E"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",163,"^19",163,"^1F",3,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^2C","^2D","^2E"]]]]]],"~$*reactions*",["^ ","^O","~$rum.core/*reactions*","^16","../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",301,"^18",1,"^19",301,"^1:",37,"~:dynamic",true,"^1T",true,"^15",["^ ","^16","/Users/erikpearson/work/kbase/sprints/2018Q1S4/kbase-ui-plugin-example-clojurescript/src/cljs/app/../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",301,"^18",26,"^19",301,"^1:",37,"^2I",true,"^1T",true]],"^N",["^ ","^14",null,"^15",["^ ","^16","/Users/erikpearson/work/kbase/sprints/2018Q1S4/kbase-ui-plugin-example-clojurescript/src/cljs/app/../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",259,"^18",7,"^19",259,"^1:",10,"^1;",["^1<",["^1=",["^1<",[["^1X","^1L"]]]]],"^1@","Given state and ref handle, returns React component"],"^O","~$rum.core/ref","^1B",false,"^16","../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^1:",10,"^1C",["^1<",[["^1X","^1L"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",259,"^19",259,"^1F",2,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1X","^1L"]]]]],"^1@","Given state and ref handle, returns React component"],"~$static",["^ ","^O","~$rum.core/static","^16","../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",273,"^18",1,"^19",273,"^1:",12,"^15",["^ ","^16","/Users/erikpearson/work/kbase/sprints/2018Q1S4/kbase-ui-plugin-example-clojurescript/src/cljs/app/../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",273,"^18",6,"^19",273,"^1:",12],"^1@","Mixin. Will avoid re-render if none of component’s arguments have changed.\n   Does equality check (=) on all arguments","^1Q","^1R"],"^[",["^ ","^14",null,"^15",["^ ","^16","/Users/erikpearson/work/kbase/sprints/2018Q1S4/kbase-ui-plugin-example-clojurescript/src/cljs/app/../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",406,"^18",7,"^19",406,"^1:",13,"^1;",["^1<",["^1=",["^1<",[["^N","^1L","~$&","~$options"]]]]],"^1@","Same as `rum.core/cursor-in` but accepts single key instead of path vector","^1M",["^ ","^1B",true,"^1F",2,"^1C",[["^1<",["^N","^1L","^2M"]]],"^1;",["^1<",[["^N","^1L","~$&","^2M"]]],"^1E",["^1<",[null]]]],"^O","~$rum.core/cursor","^1B",true,"^16","../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^1:",13,"^1M",["^ ","^1B",true,"^1F",2,"^1C",[["^1<",["^N","^1L","^2M"]]],"^1;",["^1<",[["^N","^1L","~$&","^2M"]]],"^1E",["^1<",[null]]],"^1C",[["^1<",["^N","^1L","^2M"]]],"^1D",null,"^1E",["^1<",[null]],"^18",1,"^17",406,"^19",406,"^1F",2,"^1G",true,"^1;",["^1<",[["^N","^1L","~$&","^2M"]]],"^1@","Same as `rum.core/cursor-in` but accepts single key instead of path vector"],"^1X",["^ ","^14",null,"^15",["^ ","^16","/Users/erikpearson/work/kbase/sprints/2018Q1S4/kbase-ui-plugin-example-clojurescript/src/cljs/app/../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",14,"^18",7,"^19",14,"^1:",12,"^1;",["^1<",["^1=",["^1<",[["~$comp"]]]]],"^1@","Given React component, returns Rum state associated with it"],"^O","~$rum.core/state","^1B",false,"^16","../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^1:",12,"^1C",["^1<",[["^2O"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",14,"^19",14,"^1F",1,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^2O"]]]]],"^1@","Given React component, returns Rum state associated with it"],"~$cursor-in",["^ ","^14",null,"^15",["^ ","^16","/Users/erikpearson/work/kbase/sprints/2018Q1S4/kbase-ui-plugin-example-clojurescript/src/cljs/app/../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",386,"^18",7,"^19",386,"^1:",16,"^1;",["^1<",["^1=",["^1<",[["^N","~$path","~$&",["^ ","~:as","^2M"]]]]]],"^1@","Given atom with deep nested value and path inside it, creates an atom-like structure\n   that can be used separately from main atom, but will sync changes both ways:\n  \n     (def db (atom { :users { \"Ivan\" { :age 30 }}}))\n     (def ivan (rum/cursor db [:users \"Ivan\"]))\n     \\@ivan ;; => { :age 30 }\n     (swap! ivan update :age inc) ;; => { :age 31 }\n     \\@db ;; => { :users { \"Ivan\" { :age 31 }}}\n     (swap! db update-in [:users \"Ivan\" :age] inc) ;; => { :users { \"Ivan\" { :age 32 }}}\n     \\@ivan ;; => { :age 32 }\n  \n  Returned value supports deref, swap!, reset!, watches and metadata.\n  The only supported option is `:meta`","^1M",["^ ","^1B",true,"^1F",2,"^1C",[["^1<",["^N","^2R",["^ ","^2S","^2M"]]]],"^1;",["^1<",[["^N","^2R","~$&",["^ ","^2S","^2M"]]]],"^1E",["^1<",[null]]]],"^O","~$rum.core/cursor-in","^1B",true,"^16","../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^1:",16,"^1M",["^ ","^1B",true,"^1F",2,"^1C",[["^1<",["^N","^2R",["^ ","^2S","^2M"]]]],"^1;",["^1<",[["^N","^2R","~$&",["^ ","^2S","^2M"]]]],"^1E",["^1<",[null]]],"^1C",[["^1<",["^N","^2R",["^ ","^2S","^2M"]]]],"^1D",null,"^1E",["^1<",[null]],"^18",1,"^17",386,"^19",386,"^1F",2,"^1G",true,"^1;",["^1<",[["^N","^2R","~$&",["^ ","^2S","^2M"]]]],"^1@","Given atom with deep nested value and path inside it, creates an atom-like structure\n   that can be used separately from main atom, but will sync changes both ways:\n  \n     (def db (atom { :users { \"Ivan\" { :age 30 }}}))\n     (def ivan (rum/cursor db [:users \"Ivan\"]))\n     \\@ivan ;; => { :age 30 }\n     (swap! ivan update :age inc) ;; => { :age 31 }\n     \\@db ;; => { :users { \"Ivan\" { :age 31 }}}\n     (swap! db update-in [:users \"Ivan\" :age] inc) ;; => { :users { \"Ivan\" { :age 32 }}}\n     \\@ivan ;; => { :age 32 }\n  \n  Returned value supports deref, swap!, reset!, watches and metadata.\n  The only supported option is `:meta`"],"~$dom-node",["^ ","^14",null,"^15",["^ ","^16","/Users/erikpearson/work/kbase/sprints/2018Q1S4/kbase-ui-plugin-example-clojurescript/src/cljs/app/../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",253,"^18",7,"^19",253,"^1:",15,"^1;",["^1<",["^1=",["^1<",[["^1X"]]]]],"^1@","Given state, returns top-level DOM node. Can’t be called during render"],"^O","~$rum.core/dom-node","^1B",false,"^16","../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^1:",15,"^1C",["^1<",[["^1X"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",253,"^19",253,"^1F",1,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1X"]]]]],"^1@","Given state, returns top-level DOM node. Can’t be called during render"],"~$batch",["^ ","^O","~$rum.core/batch","^16","../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",184,"^18",1,"^19",184,"^1:",21,"^1T",true,"^15",["^ ","^16","/Users/erikpearson/work/kbase/sprints/2018Q1S4/kbase-ui-plugin-example-clojurescript/src/cljs/app/../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",184,"^18",16,"^19",184,"^1:",21,"^1T",true],"^1Q",["^M",["^23","^24","~$clj-nil"]]],"~$with-ref",["^ ","^14",null,"^15",["^ ","^16","/Users/erikpearson/work/kbase/sprints/2018Q1S4/kbase-ui-plugin-example-clojurescript/src/cljs/app/../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",247,"^18",7,"^19",247,"^1:",15,"^1;",["^1<",["^1=",["^1<",[["^1>","^N"]]]]],"^1@","Adds React ref (string or callback) to component"],"^O","~$rum.core/with-ref","^1B",false,"^16","../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^1:",15,"^1C",["^1<",[["^1>","^N"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",247,"^19",247,"^1F",2,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1>","^N"]]]]],"^1@","Adds React ref (string or callback) to component"],"~$build-defc",["^ ","^14",null,"^15",["^ ","^16","/Users/erikpearson/work/kbase/sprints/2018Q1S4/kbase-ui-plugin-example-clojurescript/src/cljs/app/../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",151,"^18",7,"^19",151,"^1:",17,"^1;",["^1<",["^1=",["^1<",[["^2C","^2D","^2E"]]]]]],"^O","~$rum.core/build-defc","^1B",false,"^16","../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^1:",17,"^1C",["^1<",[["^2C","^2D","^2E"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",151,"^19",151,"^1F",3,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^2C","^2D","^2E"]]]]]],"^C",["^ ","^14",null,"^15",["^ ","^16","/Users/erikpearson/work/kbase/sprints/2018Q1S4/kbase-ui-plugin-example-clojurescript/src/cljs/app/../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",227,"^18",7,"^19",227,"^1:",14,"^1;",["^1<",["^1=",["^1<",[["^1>","^1?"]]]]],"^1@","Hydrates server rendered DOM tree with provided component."],"^O","~$rum.core/hydrate","^1B",false,"^16","../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^1:",14,"^1C",["^1<",[["^1>","^1?"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",227,"^19",227,"^1F",2,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^1>","^1?"]]]]],"^1@","Hydrates server rendered DOM tree with provided component."],"~$build-defcc",["^ ","^14",null,"^15",["^ ","^16","/Users/erikpearson/work/kbase/sprints/2018Q1S4/kbase-ui-plugin-example-clojurescript/src/cljs/app/../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",168,"^18",7,"^19",168,"^1:",18,"^1;",["^1<",["^1=",["^1<",[["^2C","^2D","^2E"]]]]]],"^O","~$rum.core/build-defcc","^1B",false,"^16","../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^1:",18,"^1C",["^1<",[["^2C","^2D","^2E"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",168,"^19",168,"^1F",3,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^2C","^2D","^2E"]]]]]],"^10",["^ ","^O","~$rum.core/derived-atom","^16","../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",347,"^18",1,"^19",347,"^1:",37,"~:style/indent",2,"^15",["^ ","^16","/Users/erikpearson/work/kbase/sprints/2018Q1S4/kbase-ui-plugin-example-clojurescript/src/cljs/app/../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",347,"^18",25,"^19",347,"^1:",37,"^36",2],"^1@","Use this to create “chains” and acyclic graphs of dependent atoms.\n   `derived-atom` will:\n    - Take N “source” refs\n    - Set up a watch on each of them\n    - Create “sink” atom\n    - When any of source refs changes:\n       - re-run function `f`, passing N dereferenced values of source refs\n       - `reset!` result of `f` to the sink atom\n    - return sink atom\n\n    (def *a (atom 0))\n    (def *b (atom 1))\n    (def *x (derived-atom [*a *b] ::key\n              (fn [a b]\n                (str a \":\" b))))\n    (type *x) ;; => clojure.lang.Atom\n    \\@*x     ;; => 0:1\n    (swap! *a inc)\n    \\@*x     ;; => 1:1\n    (reset! *b 7)\n    \\@*x     ;; => 1:7\n\n   Arguments:\n     refs - sequence of source refs\n     key  - unique key to register watcher, see `clojure.core/add-watch`\n     f    - function that must accept N arguments (same as number of source refs)\n            and return a value to be written to the sink ref.\n            Note: `f` will be called with already dereferenced values\n     opts - optional. Map of:\n       :ref           - Use this as sink ref. By default creates new atom\n       :check-equals? - Do an equality check on each update: `(= @sink (f new-vals))`.\n                        If result of `f` is equal to the old one, do not call `reset!`.\n                        Defaults to `true`. Set to false if calling `=` would be expensive"],"^A",["^ ","^14",null,"^15",["^ ","^16","/Users/erikpearson/work/kbase/sprints/2018Q1S4/kbase-ui-plugin-example-clojurescript/src/cljs/app/../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",200,"^18",8,"^19",200,"^1:",14,"^1T",true,"^1;",["^1<",["^1=",["^1<",[[]]]]]],"^1T",true,"^O","~$rum.core/render","^1B",false,"^16","../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^1:",14,"^1C",["^1<",[[]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",200,"^19",200,"^1F",0,"^1G",true,"^1;",["^1<",["^1=",["^1<",[[]]]]]],"~$empty-queue",["^ ","^O","~$rum.core/empty-queue","^16","../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",190,"^18",1,"^19",190,"^1:",27,"^1T",true,"^15",["^ ","^16","/Users/erikpearson/work/kbase/sprints/2018Q1S4/kbase-ui-plugin-example-clojurescript/src/cljs/app/../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",190,"^18",16,"^19",190,"^1:",27,"^1T",true],"^1Q","~$cljs.core/IVector"],"~$build-class",["^ ","^14",null,"^15",["^ ","^16","/Users/erikpearson/work/kbase/sprints/2018Q1S4/kbase-ui-plugin-example-clojurescript/src/cljs/app/../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",26,"^18",8,"^19",26,"^1:",19,"^1T",true,"^1;",["^1<",["^1=",["^1<",[["^A","^2D","^2E"]]]]]],"^1T",true,"^O","~$rum.core/build-class","^1B",false,"^16","../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^1:",19,"^1C",["^1<",[["^A","^2D","^2E"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",26,"^19",26,"^1F",3,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^A","^2D","^2E"]]]]]],"~$build-ctor",["^ ","^14",null,"^15",["^ ","^16","/Users/erikpearson/work/kbase/sprints/2018Q1S4/kbase-ui-plugin-example-clojurescript/src/cljs/app/../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^17",137,"^18",8,"^19",137,"^1:",18,"^1T",true,"^1;",["^1<",["^1=",["^1<",[["^A","^2D","^2E"]]]]]],"^1T",true,"^O","~$rum.core/build-ctor","^1B",false,"^16","../../plugin/iframe_root/public/js/compiled/out/rum/core.cljs","^1:",18,"^1C",["^1<",[["^A","^2D","^2E"]]],"^1D",null,"^1E",["^1<",[null,null]],"^18",1,"^17",137,"^19",137,"^1F",3,"^1G",true,"^1;",["^1<",["^1=",["^1<",[["^A","^2D","^2E"]]]]]]],"~:require-macros",["^ ","^P","^P","^X","^X"],"~:cljs.analyzer/constants",["^ ","~:seen",["^M",["~:rum/react-component","~:did-mount","~:will-unmount","^15","~:did-remount","~:rum/class","~:init","~:did-catch","~:child-context","~:rum.reactive/key","~:rum/args","~:before-render","~:did-update","~:key-fn","~:will-mount","~:rum/component-stack","~:will-update","~:class-properties","~:rum/local","~:after-render","~:static-properties","~:wrap-render","~:rum.reactive/refs","~:should-update"]],"~:order",["^3G","^3O","^3L","^3V","^3C","^3T","^3E","^3X","^3Q","^3M","^3H","^3D","^3I","^3R","^3U","^3B","^3P","^3N","^3K","^3F","^3S","^3J","^3W","^15"]],"^1@",null]